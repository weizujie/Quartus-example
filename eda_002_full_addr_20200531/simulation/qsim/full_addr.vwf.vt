// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2020 13:42:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    full_addr
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module full_addr_vlg_sample_tst(
	A_1,
	B_2,
	CIN_3,
	sampler_tx
);
input  A_1;
input  B_2;
input  CIN_3;
output sampler_tx;

reg sample;
time current_time;
always @(A_1 or B_2 or CIN_3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module full_addr_vlg_check_tst (
	CO_7,
	SUM_10,
	sampler_rx
);
input  CO_7;
input  SUM_10;
input sampler_rx;

reg  CO_7_expected;
reg  SUM_10_expected;

reg  CO_7_prev;
reg  SUM_10_prev;

reg  CO_7_expected_prev;
reg  SUM_10_expected_prev;

reg  last_CO_7_exp;
reg  last_SUM_10_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	CO_7_prev = CO_7;
	SUM_10_prev = SUM_10;
end

// update expected /o prevs

always @(trigger)
begin
	CO_7_expected_prev = CO_7_expected;
	SUM_10_expected_prev = SUM_10_expected;
end



// expected CO_7
initial
begin
	CO_7_expected = 1'bX;
end 

// expected SUM_10
initial
begin
	SUM_10_expected = 1'bX;
end 
// generate trigger
always @(CO_7_expected or CO_7 or SUM_10_expected or SUM_10)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CO_7 = %b | expected SUM_10 = %b | ",CO_7_expected_prev,SUM_10_expected_prev);
	$display("| real CO_7 = %b | real SUM_10 = %b | ",CO_7_prev,SUM_10_prev);
`endif
	if (
		( CO_7_expected_prev !== 1'bx ) && ( CO_7_prev !== CO_7_expected_prev )
		&& ((CO_7_expected_prev !== last_CO_7_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO_7_expected_prev);
		$display ("     Real value = %b", CO_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CO_7_exp = CO_7_expected_prev;
	end
	if (
		( SUM_10_expected_prev !== 1'bx ) && ( SUM_10_prev !== SUM_10_expected_prev )
		&& ((SUM_10_expected_prev !== last_SUM_10_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SUM_10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SUM_10_expected_prev);
		$display ("     Real value = %b", SUM_10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SUM_10_exp = SUM_10_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module full_addr_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_1;
reg B_2;
reg CIN_3;
// wires                                               
wire CO_7;
wire SUM_10;

wire sampler;                             

// assign statements (if any)                          
full_addr i1 (
// port map - connection between master ports and signals/registers   
	.A_1(A_1),
	.B_2(B_2),
	.CIN_3(CIN_3),
	.CO_7(CO_7),
	.SUM_10(SUM_10)
);

// A_1
initial
begin
	A_1 = 1'b0;
	A_1 = #80000 1'b1;
	A_1 = #90000 1'b0;
end 

// B_2
initial
begin
	B_2 = 1'b0;
	B_2 = #110000 1'b1;
	B_2 = #110000 1'b0;
end 

// CIN_3
initial
begin
	CIN_3 = 1'b0;
	CIN_3 = #150000 1'b1;
	CIN_3 = #120000 1'b0;
end 

full_addr_vlg_sample_tst tb_sample (
	.A_1(A_1),
	.B_2(B_2),
	.CIN_3(CIN_3),
	.sampler_tx(sampler)
);

full_addr_vlg_check_tst tb_out(
	.CO_7(CO_7),
	.SUM_10(SUM_10),
	.sampler_rx(sampler)
);
endmodule

